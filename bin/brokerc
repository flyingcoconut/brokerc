#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Author : Patrick Charron
# Email : patrick.charron.pc@gmail.com
# Description : Message Broker Client
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import sys
import os

from brokerc import drivers

def output(message):
    print(message)

def main():
    parser = argparse.ArgumentParser(description='Broker Client')
    parser.add_argument('--broker', metavar='BROKER', type=str, help='broker')
    parser.add_argument('--driver', metavar='DRIVER', type=str, help='broker driver')
    parser.add_argument('--list-drivers', action='store_true', help='list available drivers')
    parser.add_argument('--list-brokers', action='store_true', help='list available brokers')
    parser.add_argument('--debug', action='store_true', help='enable debug')
    parser.add_argument('--stats', action='store_true', help='display stats')
    parser.add_argument('--sample', type=int, help='print message at a specific frequency')
    parser.add_argument('--fields', metavar='N', type=str, nargs='+', help='output specific fields')
    parser.add_argument('--throttling', metavar='Msg/s', type=int, help='process message every second')
    parser.add_argument('--host', metavar='HOSTNAME', type=str, default="localhost", help='broker hostname')
    parser.add_argument('--port', metavar='PORT', type=int, help='broker port')
    parser.add_argument('--prefetch', metavar='QUANTITY', type=int, help='prefetch')
    parser.add_argument('--consumer', action='store_true', default=False, help='act as a consumer')
    parser.add_argument('--exchange', metavar='EXCHANGE', type=str, help='exchange name')
    parser.add_argument('--vhost', metavar='N', type=str, help='vhost')
    parser.add_argument('--queue', metavar='N', type=str, nargs='+', help='queue name')
    parser.add_argument('--type', metavar='N', type=str, choices=['direct', 'fanout', 'topic'], help='exchange type')
    parser.add_argument('--key', type=str, help='key name')
    parser.add_argument('--durable', action='store_true', help='durable exchange')
    parser.add_argument('--persistent', action='store_true', help='persistant message')
    parser.add_argument('--declare', metavar='N', type=bool, help='declare exchange')
    parser.add_argument('--ack', action='store_true', help='ack message')
    parser.add_argument('--exclusive', action='store_true', help='exclusive queue')
    parser.add_argument('--channel', metavar='N', type=str, nargs='+', help='channel name')
    parser.add_argument('--region', metavar='REGION', type=str, help='region name')
    parser.add_argument('--aws-access-key', metavar='KEY', type=str, help='AWS access key')
    parser.add_argument('--aws-secret-key', metavar='KEY', type=str, help='AWS secret key')
    args = parser.parse_args()

    if args.list_brokers:
        for broker in drivers.list_brokers():
            print(broker)
        sys.exit()

    if args.list_drivers:
        if args.broker:
            for driver in drivers.list_drivers(args.broker):
                print(driver)
        else:
            sys.exit('No broker selected')
        sys.exit()

    else:
        try:
            driver = drivers.load(args.broker, args.driver, args, output)
            pass
        except ImportError as e:
            sys.exit(e)
        except ValueError as e:
            sys.exit(e)
        
        try:
            driver.initialize()
        except Exception as e:
            sys.exit(e)

        if args.consumer:
            try:
                driver.consume("")
            except KeyboardInterrupt:
                sys.exit(0)
        else:
            if os.isatty(0):
                print("Press ctrl+c to quit")
            try:
                for line in sys.stdin:
                    driver.publish(line)
            except KeyboardInterrupt:
                sys.exit(0)

if __name__ == "__main__":
    main()
