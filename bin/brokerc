#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Author : Patrick Charron
# Email : patrick.charron.pc@gmail.com
# Description : Message Broker Client
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import sys
import os

from brokerc import brokers
from brokerc import output

def main():
    parser = argparse.ArgumentParser(description='Message Broker Client')
    parser.add_argument('--broker', metavar='BROKER', type=str, help='broker')
    parser.add_argument('--driver', metavar='DRIVER', type=str, help='broker driver')
    parser.add_argument('--list-drivers', action='store_true', help='list available drivers')
    parser.add_argument('--list-brokers', action='store_true', help='list available brokers')
    parser.add_argument('--debug', action='store_true', help='enable debug')
    parser.add_argument('--stats', action='store_true', help='display stats')
    parser.add_argument('--close', action='store_true', help='close consumer after one message')
    parser.add_argument('--sample', type=int, help='print message at a specific frequency')
    parser.add_argument('--list-meta', action='store_true', help='close consumer after one message')
    parser.add_argument('--all-meta', action='store_true', help='display all metadata')
    parser.add_argument('--meta', metavar='N', type=str, nargs='+', help='output specific metadata')
    parser.add_argument('--throttling', metavar='Msg/s', type=int, help='process message every second')
    parser.add_argument('--consumer', action='store_true', default=False, help='act as a consumer')

    parser.add_argument('--aws-access-key', metavar='KEY', type=str, help='AWS access key')
    parser.add_argument('--aws-secret-key', metavar='KEY', type=str, help='AWS secret key')
    args, additional = parser.parse_known_args()

    if args.list_brokers:
        for broker in brokers.list_brokers():
            print(broker)

    elif args.list_drivers:
        if args.broker:
            broker = brokers.create(args.broker)
            for driver in broker.list_drivers():
                print(driver)
        else:
            sys.exit('No broker selected')

    else:
        out = output.Output(metadata=args.meta)
        try:
            broker = brokers.create(args.broker)
            broker.load(args.driver, additional, out)
        except ImportError as e:
            sys.exit(e)
        except ValueError as e:
            sys.exit(e)
        
        try:
            broker.initialize()
        except Exception as e:
            sys.exit(e)

        if args.consumer:
            try:
                broker.consume("")
            except KeyboardInterrupt:
                sys.exit(0)
        else:
            if os.isatty(0):
                print("Press ctrl+c to quit")
            try:
                for line in sys.stdin:
                    broker.publish(line.strip())
            except KeyboardInterrupt:
                sys.exit(0)

if __name__ == "__main__":
    main()
